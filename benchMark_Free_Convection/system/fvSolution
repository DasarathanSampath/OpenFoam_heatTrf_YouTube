/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1906                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSolution;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

solvers
{
    p_rgh
    {
        solver           GAMG;
        tolerance        0;
        relTol           0.01;

        smoother         DICGaussSeidel;

    }
    p_rghFinal
    {
        $p_rgh;
        tolerance       1e-6;
        relTol           0;
    }

    "rho.*"
    {
        solver           GAMG;
        tolerance        0;
        relTol           0;
        smoother         DICGaussSeidel;
    }


    "(U|h|k|epsilon|omega|nuTilda)"
    {
        solver          PBiCGStab;
        preconditioner  DILU;
        tolerance       1e-8;
        relTol          0.1;
    }

    "(U|h|k|epsilon|omega|nuTilda)Final"
    {
	$U;
	tolerance 	1e-6;
	relTol		0;
    }

}

SIMPLE
{
    momentumPredictor no;
    nNonOrthogonalCorrectors 0;
    pRefCell        0;
    pRefValue       0;

    residualControl
    {
        p_rgh           1e-4;
        U               1e-4;
        h               1e-4;

        // possibly check turbulence fields
        "(k|epsilon|omega)" 1e-3;
    }
}


PIMPLE
{
    nOuterCorrectors    3;
    nCOrrectors         1;
    nNonOrthogonalCorrectors 0;
    pRefCell        0;
    pRefValue       1e5;
}


// apparently the SA-IDDES does not have relaxation factors in the fullCase
// for initialising case, boundaryFoam is used which is somewhat like
// turbulent version of potentialFoam --> gives an initial velocity field to work 
// with 

// so for starters going to do away with relaxation factors 



relaxationFactors
{
    fields
    {
        rho             1.0;
        p_rgh           0.7;
    }
    equations
    {
        U               0.3;
        h               0.3;
        "(k|epsilon|omega|nuTilda)" 0.7;
    }
}


// okay looks like i still need to give a blank entry at least...
// at least a relaxation factor of 1
// looks like the solver won't converge, i'll switch to more steady schemes
/*
relaxationFactors
{
    fields
    {
        rho             1.0;
        p_rgh           1.0;
    }
    equations
    {
        ".*"        1;
    }
}
*/
// ************************************************************************* //
